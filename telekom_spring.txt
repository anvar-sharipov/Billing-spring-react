package com.WEAK.telekom.controllers;

// –ò–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª–∏, –∫–∞–∫ –≤ Django: from .models import Etrap
import com.WEAK.telekom.models.Etrap;

// –ò–º–ø–æ—Ä—Ç —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è, –∫–∞–∫ –≤ Django: –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –º–æ–¥–µ–ª–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –ë–î
import com.WEAK.telekom.repositories.EtrapRepository;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

// @RestController ‚âà Django: @api_view + –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ JsonResponse
@RestController

// @RequestMapping("/api/etraps") ‚âà Django: URL path('api/etraps/', ...)
@RequestMapping("/api/etraps")

// @CrossOrigin(origins = "*") ‚âà Django: –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ CORS (django-cors-headers)
@CrossOrigin(origins = "*")
public class EtrapController {

    // @Autowired ‚âà Django: etrapRepository = Etrap.objects (–∏–Ω—ä–µ–∫—Ü–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏)
    @Autowired
    private EtrapRepository etrapRepository;

    // GET /api/etraps/ ‚âà Django: Etrap.objects.all()
    @GetMapping
    public List<Etrap> getAll() {
        return etrapRepository.findAll();
    }

    // POST /api/etraps/ ‚âà Django: Etrap.objects.create()
    @PostMapping
    public Etrap create(@RequestBody Etrap etrap) {
        return etrapRepository.save(etrap);
    }

    // PUT /api/etraps/{id}/ ‚âà Django:
    // instance = get_object_or_404(Etrap, id=id)
    // instance.etrap = updated_data['etrap']
    // instance.save()
    @PutMapping("/{id}")
    public ResponseEntity<Etrap> update(@PathVariable Long id, @RequestBody Etrap updatedEtrap) {
        return etrapRepository.findById(id)
                .map(etrap -> {
                    etrap.setEtrap(updatedEtrap.getEtrap());
                    etrapRepository.save(etrap);
                    return ResponseEntity.ok(etrap);
                })
                .orElse(ResponseEntity.notFound().build());
    }

    // DELETE /api/etraps/{id}/ ‚âà Django:
    // instance = get_object_or_404(Etrap, id=id)
    // instance.delete()
    @DeleteMapping("/{id}")
    public ResponseEntity<Void> delete(@PathVariable Long id) {
        if (etrapRepository.existsById(id)) {
            etrapRepository.deleteById(id);
            return ResponseEntity.noContent().build(); // HTTP 204 No Content
        } else {
            return ResponseEntity.notFound().build(); // HTTP 404 Not Found
        }
    }
}






import React, { useEffect, useState, useRef } from "react";

const AdminEtraps = () => {
  const [etraps, setEtraps] = useState([]);
  const [newEtrap, setNewEtrap] = useState("");
  const [editPk, setEditPk] = useState(null);
  const [editName, setEditName] = useState("");

  const editInputRef = useRef(null); // üîπ –®–∞–≥ 1

  useEffect(() => {
    fetch("http://localhost:8080/api/etraps")
      .then((res) => res.json())
      .then((res) => setEtraps(res))
      .catch(console.error);
  }, []);

  useEffect(() => {
    if (editPk !== null && editInputRef.current) {
      editInputRef.current.focus();        // üîπ –§–æ–∫—É—Å
      editInputRef.current.select();       // üîπ –í—ã–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
    }
  }, [editPk]);

  const addNewEtrap = () => {
    if (!newEtrap.trim()) return;
    fetch("http://localhost:8080/api/etraps", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ etrap: newEtrap }),
    })
      .then((res) => res.json())
      .then((added) => setEtraps((p) => [...p, added]))
      .catch(console.error);
    setNewEtrap("");
  };

  const deleteEtrap = (id) => {
    fetch("http://localhost:8080/api/etraps/" + id, {
      method: "DELETE",
    }).then(() => setEtraps((p) => p.filter((e) => e.id !== id)));
  };

  const startEdit = (etrap) => {
    setEditPk(etrap.id);
    setEditName(etrap.etrap);
  };

  const saveEdit = (pk) => {
    fetch('http://localhost:8080/api/etraps/' + pk, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ etrap: editName }),
    })
    .then(res => res.json())
    .then(updated => {
        setEtraps(etraps.map(e => e.id === pk ? updated : e));
        setEditPk(null);
        setEditName('');
    })
  }

  return (
    <div>
      <label>
        New etrap:
        <input
          type="text"
          onChange={(e) => setNewEtrap(e.target.value)}
          value={newEtrap}
        />
      </label>
      <button onClick={addNewEtrap} disabled={!newEtrap.trim()}>Add</button>
      <ul>
        {etraps.map((etrap) => (
          <li key={etrap.id}>
            {editPk === etrap.id ? (
              <>
                <input
                  type="text"
                  ref={editInputRef} // üîπ –ü—Ä–∏–≤—è–∑–∫–∞ —Å—Å—ã–ª–∫–∏
                  onChange={(e) => setEditName(e.target.value)}
                  value={editName}
                />
                <button onClick={() => saveEdit(etrap.id)} >Save</button>
                <button onClick={(e) =>  setEditPk(null)}>Cancel</button>
              </>
            ) : (
              <>
                {etrap.etrap}
                <button onClick={() => startEdit(etrap)}>Edit</button>
                <button onClick={() => deleteEtrap(etrap.id)}>Delete</button>
              </>
            )}
          </li>
        ))}
      </ul>
    </div>
  );
};

export default AdminEtraps;



–ò—Å–ø–æ–ª—å–∑—É—é—Ç –≥–æ—Ç–æ–≤—É—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É –¥–ª—è –≤—Å–ø–ª—ã–≤–∞—é—â–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (—Ç–æ—Å—Ç–æ–≤), –Ω–∞–ø—Ä–∏–º–µ—Ä: (like messages in django)
npm install react-toastify

package repositories is:
po suti repositories eto dostup k baze
public interface EtrapRepository extends JpaRepository<Etrap, Long>{}
üß† –ü—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏:
"–°–æ–∑–¥–∞—é –ø—É–±–ª–∏—á–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å EtrapRepository, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞—Å–ª–µ–¥—É–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ JpaRepository –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å—É—â–Ω–æ—Å—Ç—å—é Etrap, —É –∫–æ—Ç–æ—Ä–æ–π id —Ç–∏–ø–∞ Long."
‚úÖ –ë–ª–∞–≥–æ–¥–∞—Ä—è —ç—Ç–æ–º—É —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ:
findAll() ‚Äî –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ —ç—Ç—Ä–∞–ø—ã
findById(1L) ‚Äî –Ω–∞–π—Ç–∏ —ç—Ç—Ä–∞–ø –ø–æ ID
save(etrap) ‚Äî —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å —ç—Ç—Ä–∞–ø
deleteById(1L) ‚Äî —É–¥–∞–ª–∏—Ç—å —ç—Ç—Ä–∞–ø –ø–æ ID
–∏ –¥–µ—Å—è—Ç–∫–∏ –¥—Ä—É–≥–∏—Ö –º–µ—Ç–æ–¥–æ–≤ ‚Äî –±–µ–∑ –µ–¥–∏–Ω–æ–π —Å—Ç—Ä–æ—á–∫–∏ SQL.